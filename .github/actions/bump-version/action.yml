name: "Bump Version"
description: "Bump version in Maven POM file and commit changes"

inputs:
  token:
    description: "GitHub token for committing changes"
    required: true
  version-type:
    description: "Type of version bump (major, minor, patch, release)"
    required: false
    default: "patch"
  target-version:
    description: "Specific target version (overrides version-type)"
    required: false

outputs:
  old-version:
    description: "Version before bump"
    value: ${{ steps.bump.outputs.old-version }}
  new-version:
    description: "Version after bump"
    value: ${{ steps.bump.outputs.new-version }}

runs:
  using: "composite"
  steps:
    - name: Configure Git
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Bump version
      id: bump
      shell: bash
      run: |
        # Get current version
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "old-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "üîç Current version: $CURRENT_VERSION"
        
        # If target version is specified, use it
        if [[ -n "${{ inputs.target-version }}" ]]; then
          NEW_VERSION="${{ inputs.target-version }}"
          echo "üéØ Using target version: $NEW_VERSION"
        else
          # Parse current version (remove -SNAPSHOT)
          VERSION_CORE=${CURRENT_VERSION%-SNAPSHOT}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_CORE"
          
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Bump based on type
          case "${{ inputs.version-type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
            release)
              # Remove -SNAPSHOT but don't increment
              NEW_VERSION="$VERSION_CORE"
              ;;
          esac
          
          if [[ "${{ inputs.version-type }}" != "release" ]]; then
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
        fi
        
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "‚¨ÜÔ∏è New version: $NEW_VERSION"
        
        # Update version in pom.xml
        mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false -B
        
        # Commit changes
        git add pom.xml
        git commit -m "Bump version from $CURRENT_VERSION to $NEW_VERSION" || echo "No changes to commit"
        
        echo "‚úÖ Version bumped successfully!"